package ch04;

public class Intro {
    // 인스턴스 생성과 힙 메모리(Heap memory)
    // 인스턴스
    // - 클래스는 객체의 속성을 정의하고, 기능을 구현하여 만들어 놓은 코드 상태
    // - 설제 클래스 기반으로 생성된 객체(인스턴스)는 각각 다른 멤버 변수 값을 가지게 됨
    //   가령, 학생의 클래스에서 생성된 각각의 인스턴스는 각각 다른 이름, 학번, 학년 등의 값을 가지게 됨
    // - new 키워드를 사용하여 인스턴스 생성

    // 힙 메모리
    // - 생성된 인스턴스는 동적 메모리(Heap memory)에 할당된다.
    // - C, C++ 언어에서는 사용한 동적 메모리를 프로그래머가 해제 시켜야 하지만, 자바에서는 Garbage Collector가 주기적으로 사용하지 않는 메모리를 수거
    // - 하나의 클래스로부터 여러 개의 인스턴스가 생성되고 각각 다른 메모리 주소를 가지게 된다.

    // 용어정리
    // - 객체: 객체지향 프로그램의 대상, 생성된 인스턴스
    // - 클래스: 객체를 프로그래밍 하기위해 코드로 정의해 놓은 상태
    // - 인스턴스: new 키워드를 사용하여 클래스를 메모리에 생성한 상태
    // - 멤버변수: 클래스의 속성, 특성
    // - 메서드: 멤버변수를 이용하여 클래스의 기능을 구현한 함수
    // - 참조변수: 메모리에 생성된 인스턴스를 가리키는 변수
    // - 참조 값: 생성된 인스턴스의 메모리 주소 값

    // ====================================================================================================

    // 6. 생성자에 대해 알아보자 - Constructor
    // 생성자
    // - 객체를 생성할 때, new 키워드와 함께 사용
    // - 생성자는 일반 함수처럼 기능을 호출하는 것은 아니고, 객체를 생성하기 위해 new와 함께 호출된다.
    // - 객체가 생성될 때, 변수나 상수를 초기화 하거나 다른 초기화 기능을 수행하는 메서드를 호출한다.
    // - 생성자는 반환 값이 없고, 클래스의 이름과 동일
    // - 대부분의 생성자는 외부에서 접근 가능하지만, 필요에 의해 private으로 선언되는 경우도 있다.

    // 기본 생성자 - default constructor
    // - 클래스에는 반드시 적어도 하나 이상의 생성자가 존재한다.
    // - 클래스에 생성자를 구현하지 않아도 new 키워드와 함께 생성자를 호출할 수 있다.
    // - 클래스에 생성자가 하나도 없는 경우 컴파일러가 생성자 코드를 넣어준다.
    // - 매개 변수가 없다. 구현부가 없다.

    // ====================================================================================================

    // 7. 여러가지 생성자를 정의하는 생성자 오버로딩(overloading)
    // 생성자 정의하기
    // - 생성자를 구현해서 사용할 수 있다.
    // - 클래스에 생성자를 따로 구현하면 기본 생성자(default constructor)는 제공되지 않음
    // - 생성자를 호출하는 코드(client 코드)에서 여러 생성자 중 필요에 따라 호출해서 사용할 수 있음
}
