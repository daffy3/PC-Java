package ch01;

public class Intro {
    // 01. 여러가지 자료구조에 대해 알아보자.

    // 자료구조란 무엇인가? (Data Structure)
    // - 프로그램에서 사용할 많은 데이터를 메모리 상에서 관리하는 여러 구현방법들
    // - 효율적인 자료구조가 성능 좋은 알고리즘의 기반이 된다.
    // - 자료의 효율적인 관리는 프로그램의 수행속도와 밀접한 관련이 있다.
    // - 여러 자료구조 중에서 구현하려는 프로그램에 맞는 최적의 자료구조를 활용해야 하므로 자료구조에 대한 이해가 중요하다.

    // 자료구조에는 어떤 것들이 있나?
    // 한 줄로 자료를 관리하기(선형 자료구조)
    // - 배열(Array): 선형으로 자료를 관리, 정해진 크기의 메모리를 먼저 할당받아 사용하고, 자료의 물리적 위치와 논리적 위치가 같다. 배열의 가장 큰 특징은 중간 값, 엘리먼트가 비어 있으면 안된다.
    // - 연결 리스트(Linked List): 선형으로 자료를 관리. 자료가 추가될 때마다 메모리를 할당 받고 자료는 링크로 연결된다. 자료의 물리적 위치와 논리적 위치가 다를 수 있다.
    // 연결 리스트 같은 경우에는 다름 엘리먼트를 가리킬 링크를 가지고 있다. 자바에서는 객체의 참조 변수를 가리키도록 구현하면 된다.

    // 배열 같은 경우는 자료의 추가 및 삭제에 드는 비용이 많다. 그러나 자료의 위치를 안다고 가정했을 때, 자료를 검색하거나 꺼내오는 데 시간은 짧다.
    // 연결 리스트 같은 경우는 배열의 반대다.

    // ====================================================================================================

    // 스택(Stack)
    // 가장 나중에 입력된 자료가 가장 먼저 출력되는 자료구조. --> 후입선출(Last In First Out)
    // ex) 바둑, 체스 게임 같은 경우에서 무르기, 미로찾기 같은 게임 기능을 구현할 떄 혹은 깊이우선기능 개발 할 경우를 예로 들 수 있다.

    // 큐(Queue)
    // 가장 먼저 입력된 자료가 가장 먼저 출력되는 자료구조. --> 선입선출(First In First Out)
}
