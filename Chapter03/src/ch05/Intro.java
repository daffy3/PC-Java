package ch05;

public class Intro {
    // 05. 메서드 재정의와 가상 메서드 원리
    // 메서드는 어떻게 호출되고 실행 되는가?
    // - 메서드(함수)의 이름은 주소 값을 나타낸다.
    // - 메서드는 명령어의 set이고, 프로그램이 로드되면 메서드 영역(코드 영억)에 명령어 set이 위치
    // - 해당 메서드가 호출되면 명령어 set이 있는 주소를 찾아 명령어가 실행된다.
    // - 이때, 메서드에서 사용하는 변수들은 스택 메모리에 위치하게 된다.
    // - 따라서 다른 인스턴스라도 같은 메서드의 코드는 같으므로 같은 메서드가 호출된다.
    // - 인스턴스가 생성되면 변수는 힙 메모리에 따로 생성되지만, 메서드 명령어 set은 처음 한 번만 로드 된다.

    // 가상 메서드의 원리
    // - 가상 메서드 테이블(Virtual Method Table)에서 해당 메서드에 대한 address를 가지고 있다.
    // - 재정의된 경우느 재정의 된 메서드의 주소를 가리킨다.

    // ====================================================================================================

    // 06. 다형성과 다형성을 사용하는 이유
    // 다형성(polymorphism)이란?
    // - 하나의 코드가 여러 자료형으로 구현되어 실행되는 것
    // - 같은 코드에서 여러 다른 실행 결과가 나옴
    // - 정보은닉, 상속과 더불어 객체지향 프로그래밍의 가장 큰 특징 중 하나이다.
    // - 다형성을 잘 활용하면 유연하고 확장성 있고, 유지보수가 편리한 프로그램을 만들 수 있다.

    // 다형성을 사용하는 이유?
    // - 상속과 메서드 재정의를 활용하여 확장성 있는 프로그램을 만들 수 있다.
    // - 그렇지 않은 경우, 많은 if-else if문이 구현되고 코드의 유지보수가 어려워진다.
    // - 상위 클래스에서는 공통적인 부분을 제공하고 하위 클래스에서는 각 클래스에 맞는 기능을 구현한다.
    // - 여러 클래스를 하나의 타입(상위 클래스)으로 핸들링 할 수 있다.

    // ====================================================================================================

    // 07. 상속은 언제 사용할까?
    // IS-A 관계(is a relationship: inheritance)
    // - 일반적인 개념과 구체적인 개념과의 관계
    // - 상위 클래스: 하위 클래스보다 일반적인 개념
    // - 하위 클래스: 상위 클래스보다 구체적인 개념들이 더해짐
    // - 상속은 클래스 간의 결합도가 높은 설계. 그래서 복잡하게 구성하는 것이 좋은 프로그래밍 방식은 아니다.
    // - 상위 클래스의 수정이 많은 하위 클래스에 영향을 미칠수 있다.
    // - 계층구조가 복잡하가나 hierarchy가 높으면 좋지 않다. *hierarchy: 계층

    // HAS-A 관계(Composition)
    // - 클래스가 다른 클래스를 포함하는 관계(변수로 선언)
    // - 코드 재사용의 가장 일반적인 방법
    // - Student가 Subject를 포함하는
    // - Library를 구현할 때, ArrayList 생성하여 사용
    // - 상속하지 않음


}
